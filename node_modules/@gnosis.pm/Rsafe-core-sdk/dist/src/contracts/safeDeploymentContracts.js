"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSafeProxyFactoryContractDeployment = exports.getMultiSendContractDeployment = exports.getSafeContractDeployment = void 0;
const safe_deployments_1 = require("@gnosis.pm/safe-deployments");
const config_1 = require("./config");
function getSafeContractDeployment(safeVersion, chainId, isL1SafeMasterCopy = false) {
    const version = config_1.safeDeploymentsVersions[safeVersion].safeMasterCopyVersion;
    const filters = { version, network: chainId.toString(), released: true };
    if (config_1.safeDeploymentsL1ChainIds.includes(chainId) || isL1SafeMasterCopy) {
        return (0, safe_deployments_1.getSafeSingletonDeployment)(filters);
    }
    return (0, safe_deployments_1.getSafeL2SingletonDeployment)(filters);
}
exports.getSafeContractDeployment = getSafeContractDeployment;
function getMultiSendContractDeployment(safeVersion, chainId) {
    const version = config_1.safeDeploymentsVersions[safeVersion].multiSendVersion;
    return (0, safe_deployments_1.getMultiSendDeployment)({ version, network: chainId.toString(), released: true });
}
exports.getMultiSendContractDeployment = getMultiSendContractDeployment;
function getSafeProxyFactoryContractDeployment(safeVersion, chainId) {
    const version = config_1.safeDeploymentsVersions[safeVersion].safeProxyFactoryVersion;
    return (0, safe_deployments_1.getProxyFactoryDeployment)({ version, network: chainId.toString(), released: true });
}
exports.getSafeProxyFactoryContractDeployment = getSafeProxyFactoryContractDeployment;
//# sourceMappingURL=safeDeploymentContracts.js.map